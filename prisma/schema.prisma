generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // <-- required by v5 adapter
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  ranks         Rank[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Album {
  id        String   @id
  title     String
  artist    String
  imageUrl  String?
  link      String   @unique // this is unique 
  songs     Song[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, artist])
}

model Song {
  id        String   @id
  title     String
  link      String?
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId   String
  ranks     Rank[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, albumId])
}

model Rank {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId    String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, songId])
  @@unique([userId, position])
}
